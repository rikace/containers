{"version":3,"sources":["webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/core/data.service.ts","webpack:///src/app/customers/customers.component.ts","webpack:///src/app/customers/customers.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","pathMatch","redirectTo","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DataService","http","url","get","pipe","handleError","customer","put","error","console","json","providedIn","CustomersComponent","dataService","customers","editId","editViewEnabled","getCustomersSummary","subscribe","data","updateCustomer","status","errorMessage","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CustomersComponent }     from './customers/customers.component';\n\nconst routes: Routes = [\n  { path: '',  pathMatch:'full', redirectTo: '/customers' },\n  { path: 'customers', component: CustomersComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'customers-app';\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CustomersComponent } from './customers/customers.component';\n\n@NgModule({\n  declarations: [\n    AppComponent, CustomersComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule, ReactiveFormsModule, HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { ICustomer } from '../shared/interfaces';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataService {\n    \n    private url: string = 'api/customersservice/customers/';\n    \n    constructor(private http: HttpClient) { }\n    \n    getCustomersSummary() : Observable<ICustomer[]> {\n        return this.http.get<ICustomer[]>(this.url)\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n    \n    updateCustomer(customer: ICustomer) {       \n      return this.http.put(this.url + customer.id, customer)\n                .pipe(\n                    catchError(this.handleError)\n                );\n    }\n    \n    handleError(error: any) {\n        console.error(error);\n        return Observable.throw(error.json().error || 'Server error');\n    }\n    \n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { DataService } from '../core/data.service';\nimport { ICustomer } from '../shared/interfaces';\n\n@Component({\n    selector: 'app-customers',\n    templateUrl: 'customers.component.html'\n})\nexport class CustomersComponent implements OnInit {\n    \n    customers: ICustomer[] = [];\n    editId: number = 0;\n    errorMessage: string;\n    editViewEnabled = false;\n\n    constructor(private dataService: DataService) {  }\n\n    ngOnInit() { \n        this.dataService.getCustomersSummary()\n            .subscribe((data: ICustomer[]) => this.customers = data);\n    }\n    \n    save(customer: ICustomer) {\n        this.dataService.updateCustomer(customer)\n            .subscribe((status: boolean) => {\n                if (status) {\n                    this.editId = 0;\n                } else {\n                    this.errorMessage = 'Unable to save customer';\n                }\n            })\n    }\n\n}","<h1>Customers</h1>\n<br />\n\n<!-- Added navbar to switch between list view shown in video and new edit view -->\n<div class=\"navbar\">\n    <ul class=\"nav navbar-nav\">\n        <li class=\"toolbar-item\">\n            <a (click)=\"editViewEnabled=false\" [class.active]=\"!editViewEnabled\">\n                <span class=\"glyphicon glyphicon-align-justify\"></span> List View\n            </a>\n        </li>\n        <li class=\"toolbar-item\">\n            <a (click)=\"editViewEnabled=true\" [class.active]=\"editViewEnabled\">\n                <span class=\"glyphicon glyphicon-pencil\"></span> Edit View\n            </a>\n        </li>\n    </ul>\n</div>\n\n<div *ngIf=\"!editViewEnabled\">\n    <div class=\"row header-row\">\n        <div class=\"col-md-2\">\n            Name\n        </div>\n        <div class=\"col-md-4\">\n            Email\n        </div>\n        <div class=\"col-md-4\">\n            Address\n        </div>\n        <div class=\"col-md-2\">\n            City\n        </div>\n    </div>\n    <div class=\"row\" *ngFor=\"let customer of customers\">\n        <div class=\"col-md-2\">\n            {{ customer.firstName  }} {{ customer.lastName }} \n        </div>\n        <div class=\"col-md-4\">\n            {{ customer.email }}\n        </div>\n        <div class=\"col-md-4\">\n            {{ customer.address }}\n        </div>\n        <div class=\"col-md-2\">\n            {{ customer.city }}\n        </div>\n        <br />\n    </div>\n</div>\n\n<!-- Added editable list to demonstrate doing an HTTP PUT -->\n<div *ngIf=\"editViewEnabled\">\n    <div class=\"container\" *ngFor=\"let customer of customers\">\n        <div class=\"row\" *ngIf=\"editId !== customer.id\">\n            <div class=\"col-md-4\">\n            {{ customer.firstName  }} {{ customer.lastName }} \n            </div>\n            <div class=\"col-md-8\">\n                <span class=\"btn btn-success pull-left\" \n                    (click)=\"editId=customer.id\">Edit</span>\n            </div>\n        </div>\n        <div *ngIf=\"editId == customer.id\">\n            <h4>{{ customer.firstName  }} {{ customer.lastName }}</h4>\n            <br />\n            <form (ngSubmit)=\"save(customer)\" #customerForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <label for=\"name\">First Name</label>\n                    <input type=\"text\" class=\"form-control\" name=\"firstName\" #firstName=\"ngModel\" [(ngModel)]=\"customer.firstName\" required>\n                    <div class=\"alert alert-danger\" [hidden]=\"firstName.valid\">First Name is required</div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"name\">Last Name</label>\n                    <input type=\"text\" class=\"form-control\" name=\"lastName\" #lastName=\"ngModel\" [(ngModel)]=\"customer.lastName\" required>\n                    <div class=\"alert alert-danger\" [hidden]=\"lastName.valid\">Last Name is required</div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"name\">Email</label>\n                    <input type=\"text\" class=\"form-control\" name=\"email\" #email=\"ngModel\" [(ngModel)]=\"customer.email\" required>\n                    <div class=\"alert alert-danger\" [hidden]=\"email.valid\">Email is required</div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"name\">City</label>\n                    <input type=\"text\" class=\"form-control\" name=\"city\" #city=\"ngModel\" [(ngModel)]=\"customer.city\" required>\n                    <div class=\"alert alert-danger\" [hidden]=\"city.valid\">City is required</div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"name\">Address</label>\n                    <input type=\"text\" class=\"form-control\" name=\"address\" #address=\"ngModel\" [(ngModel)]=\"customer.address\" required>\n                    <div class=\"alert alert-danger\" [hidden]=\"address.valid\">Address is required</div>\n                </div>\n                <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!customerForm.valid\">Submit</button>&nbsp;\n                <span type=\"button\" class=\"btn btn-default\" (click)=\"editId=0\">Cancel</span>\n            </form>\n        </div>\n        <br />\n    </div>\n\n    <span class=\"alert alert-danger\" [hidden]=\"!errorMessage\">{{ errorMessage }}</span>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}